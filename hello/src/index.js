var Hello = React.createClass({	render: function(){		return (			<h1>Hello React</h1>			);	}});React.render(<Hello/>, document.getElementById('div1'));var HelloProps = React.createClass({	render: function(){		return (			<h1>Hello {this.props.name}</h1>			);	}});React.render(<HelloProps name='pony'/>, document.getElementById('div2'));var Child = React.createClass({	render: function(){		return(			<div style={{background:'#fff'}}>				<p>嵌套</p>				<p>I am parent</p>				{this.props.children}			</div>			);	}});var QianTao = React.createClass({	render: function(){		return (			<div>				<p>component组合&嵌套</p>				<div>					<p>组合</p>					<HelloProps name='QianTao'/>					<Hello></Hello>				</div>				<Child><HelloProps name='I am children'/></Child>			</div>			);	}});React.render(<QianTao/>, document.getElementById('div3'));var LifeCircle = React.createClass({	//组件类创建时调用一次	getDefaultProps: function(){		console.log('getDefaultProps');		return {defaultName:'defaultName'};	},	//组件实例化挂载之前调用一次	getInitialState: function(){		console.log('getInitialState');		return {defaultState: 'defaultState'};	},	//初始化渲染之前调用一次	componentWillMount: function(){		console.log('componentWillMount');	},	//初始化渲染完成时调用一次	componentDidMount: function(){		console.log('componentDidMount');		setInterval(this.handleUpdate, 1000);	},	//更新前调用	componentWillUpdate: function(){		console.log('componentWillUpdate');	},	//更新完成调用	componentDidUpdate: function(){		console.log('componentDidUpdate');	},	//被移除时调用	componentWillUnmount: function(){		console.log('componentWillUnmount');	},	//自定义事件	handleUpdate: function(){		console.log('handleUpdate');		this.setState({update:new Date()+''});	},	//更新时调用	render: function(){		console.log('render');		return (			<div>				<h1>Hello {this.props.name}, {this.state.update}</h1>			</div>			);	}});React.render(<LifeCircle name='LifeCircle'/>, document.getElementById('div4'));var HelloEvent = React.createClass({	getInitialState: function(){		return {defaultState: 'defaultState'};	},	getDefaultProps: function(){		return {defaultName:'defaultName'};	},	onButtonClicked: function(){		this.setState({clickInfo:'you clicked '+new Date()});	},	render: function(){		return (				<div>					<h1>事件</h1>					<button onClick={this.onButtonClicked}>click me</button>					<h1>Hello {this.props.name}, {this.props.defaultName}, {this.state.defaultState}</h1>					<p style={{color:'red'}}>{this.state.clickInfo}</p>				</div>			);	}});var com = React.render(<HelloEvent name='settedName'/>, document.getElementById('div5'));console.log(com)